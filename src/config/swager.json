{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Candidate test Backend - OpenAPI 3.0",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Feed"
    },
    {
      "name": "Post",
      "description": "Operations about post"
    },
    {
      "name": "User",
      "description": "Operations about user"
    },
    {
      "name": "Check health"
    }
  ],
  "paths": {
    "/feeds": {
      "get": {
        "tags": [
          "Feed"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "description": "athor of feed",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Feed"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "List posts filter by query param",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Post"
        ],
        "description": "Create a new post",
        "security": [
          {
            "api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostWithOutId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "put": {
        "tags": [
          "Post"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Update a post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "description": "Delete a new post",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "List users filter by query param",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Create a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserWithOutId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/all": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "List users to dropdown for filter feed",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "userId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Update a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Delete a user",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkHealth": {
      "get": {
        "tags": [
          "Check health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uptime": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Feed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
          },
          "body": {
            "type": "string",
            "example": "quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Leanne Graham"
          },
          "username": {
            "type": "string",
            "example": "Bret"
          },
          "email": {
            "type": "string",
            "example": "Sincere@april.biz"
          },
          "phone": {
            "type": "string",
            "example": "1-770-736-8031 x56442"
          },
          "website": {
            "type": "string",
            "example": "hildegard.org"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "Kulas Light"
              },
              "suite": {
                "type": "string",
                "example": "Apt. 556"
              },
              "city": {
                "type": "string",
                "example": "Gwenborough"
              },
              "zipcode": {
                "type": "string",
                "example": "92998-3874"
              },
              "geo": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "string",
                    "example": "-37.3159"
                  },
                  "lng": {
                    "type": "string",
                    "example": "81.1496"
                  }
                }
              }
            }
          },
          "company": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Romaguera-Crona"
              },
              "catchPhrase": {
                "type": "string",
                "example": "Multi-layered client-server neural-net"
              },
              "bs": {
                "type": "string",
                "example": "harness real-time e-markets"
              }
            }
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
          },
          "body": {
            "type": "string",
            "example": "quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"
          }
        }
      },
      "UserWithOutId": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Leanne Graham"
          },
          "username": {
            "type": "string",
            "example": "Bret"
          },
          "email": {
            "type": "string",
            "example": "Sincere@april.biz"
          },
          "phone": {
            "type": "string",
            "example": "1-770-736-8031 x56442"
          },
          "website": {
            "type": "string",
            "example": "hildegard.org"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "Kulas Light"
              },
              "suite": {
                "type": "string",
                "example": "Apt. 556"
              },
              "city": {
                "type": "string",
                "example": "Gwenborough"
              },
              "zipcode": {
                "type": "string",
                "example": "92998-3874"
              },
              "geo": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "string",
                    "example": "-37.3159"
                  },
                  "lng": {
                    "type": "string",
                    "example": "81.1496"
                  }
                }
              }
            }
          },
          "company": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Romaguera-Crona"
              },
              "catchPhrase": {
                "type": "string",
                "example": "Multi-layered client-server neural-net"
              },
              "bs": {
                "type": "string",
                "example": "harness real-time e-markets"
              }
            }
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "PostWithOutId": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
          },
          "body": {
            "type": "string",
            "example": "quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}